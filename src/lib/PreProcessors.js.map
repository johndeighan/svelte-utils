{
  "version": 3,
  "file": "PreProcessors.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\PreProcessors.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# PreProcessors.coffee\r\n\r\nimport CoffeeScript from 'coffeescript'\r\nimport MagicString from 'magic-string'\r\nimport sorcery from 'sorcery'\r\n\r\nimport {\r\n\tundef, defined, notdefined, isEmpty, nonEmpty,\r\n\tsplitPrefix, DUMP, mapEachLine, OL, LOG,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tdbgEnter, dbgReturn, dbg, setDebugging,\r\n\t} from '@jdeighan/base-utils/debug'\r\n\r\n# --- NOTE: the marker must be taken as a comment by CoffeeScript\r\nexport marker = \"# |||| $:\"\r\nexport jsmarker = marker.replace('#', '//')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport preProc = (block) =>\r\n\r\n\tdbgEnter 'preProc', block\r\n\tcode = mapEachLine block, (line, hInfo) =>\r\n\t\t# --- hInfo has keys lineNum and nextLine\r\n\t\t#     we use nextLine to determine if there are child nodes\r\n\r\n\t\t[indent, str] = splitPrefix(line)\r\n\r\n\t\t# --- Make sure no input line contains the marker\r\n\t\tassert (str.indexOf(marker) == -1), \"line has marker: #{OL(str)}\"\r\n\r\n\t\tisTypeA = (str.indexOf('$:') == 0)\r\n\t\tisTypeB = (str.indexOf('#reactive') == 0)\r\n\r\n\t\t# --- if it's neither type of reactive statement,\r\n\t\t#     just return the original line\r\n\t\tif ! isTypeA && ! isTypeB\r\n\t\t\treturn line\r\n\r\n\t\t# --- We need to know if there's a statement on the line\r\n\t\tif isTypeA\r\n\t\t\tstmt = str.substring(2).trim()\r\n\t\telse\r\n\t\t\tstmt = str.substring(9).trim()\r\n\r\n\t\t# --- We need to know if there are indented lines following\r\n\t\tif defined(hInfo.nextLine)\r\n\t\t\t[nextIndent, nextStr] = splitPrefix(hInfo.nextLine)\r\n\t\t\tblockFollows = (nextIndent.length > indent.length)\r\n\t\telse\r\n\t\t\tblockFollows = false\r\n\r\n\t\tlResults = []\r\n\r\n\t\t# --- If there is a statement on the line, return\r\n\t\t#        <marker>\r\n\t\t#        <indent><statement>\r\n\t\tif nonEmpty(stmt)\r\n\t\t\tlResults.push \"#{indent}#{marker}\"\r\n\t\t\tlResults.push \"#{indent}#{stmt}\"\r\n\r\n\t\t# --- If there are indented lines following, return\r\n\t\t#        '<indent>if true <marker>'\r\n\t\tif blockFollows\r\n\t\t\tlResults.push \"#{indent}if true #{marker}\"\r\n\r\n\t\tif nonEmpty(lResults)\r\n\t\t\treturn lResults.join(\"\\n\")\r\n\t\telse\r\n\t\t\treturn undef\r\n\r\n\tresult = {\r\n\t\tcode\r\n\t\tmap: undef\r\n\t\t}\r\n\tdbgReturn 'preProc', result\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport postProc = (content) =>\r\n\r\n\treactiveStmtFlag = false\r\n\r\n\tcode = mapEachLine content, (line) =>\r\n\r\n\t\t[indent, str] = splitPrefix(line)\r\n\t\tif reactiveStmtFlag\r\n\t\t\treactiveStmtFlag = false\r\n\t\t\treturn \"#{indent}$: #{str}\"\r\n\r\n\t\tif (str == jsmarker)\r\n\t\t\treactiveStmtFlag = true\r\n\t\t\treturn undef\r\n\t\telse if (str == \"if (true) { #{jsmarker}\")\r\n\t\t\treturn \"#{indent}$: {\"\r\n\t\telse\r\n\t\t\treturn line\r\n\r\n\treturn {\r\n\t\tcode\r\n\t\tmap: undef\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport coffeePreProcessor = ({content, attributes, filename}) =>\r\n\r\n\t{lang, debug} = attributes\r\n\tif ! lang\r\n\t\treturn undef\r\n\tlang = lang.toLowerCase()\r\n\tif (lang != 'coffee') && (lang != 'coffeescript')\r\n\t\treturn undef\r\n\r\n\tif debug\r\n\t\tDUMP 'original content', content\r\n\r\n\t{code: coffeeCode, map: preMap} = preProc(content)\r\n\tif debug\r\n\t\tDUMP 'coffeeCode - between preProc & brew', coffeeCode\r\n\t{code: jsCode, map: coffeeMap} = brew(coffeeCode, {debug})\r\n\tif debug\r\n\t\tDUMP 'jsCode - between brew & postProc', jsCode\r\n\t{code, map: postMap} = postProc(jsCode)\r\n\tif debug\r\n\t\tDUMP 'code - after postProc', code\r\n\r\n\treturn {\r\n\t\tcode\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport brew = (coffeeCode, hOptions={}) =>\r\n\r\n\t{debug} = hOptions\r\n\ttry\r\n\t\tresult = CoffeeScript.compile(coffeeCode, {\r\n\t\t\tbare: true\r\n\t\t\theader: false\r\n\t\t\tsourceMap: true\r\n\t\t\t})\r\n\t\tif debug\r\n\t\t\tconsole.log \"brew(): OK\"\r\n\t\treturn {\r\n\t\t\tcode: result.js\r\n\t\t\tmap:  result.v3SourceMap\r\n\t\t\t}\r\n\tcatch err\r\n\t\tconsole.log err\r\n\t\tthrow err\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport i18nPreProcessor = ({content, attributes, filename}) =>\r\n\r\n\ts = new MagicString(content)\r\n\r\n\treplacer = (match, str) =>\r\n\t\tstr = str.replace(/'/g, \"\\\\'\")\r\n\t\treturn \"{translate('#{str}')}\"\r\n\r\n\ts.replace /\\u25C4(.*?)\\u25BA/g, replacer\r\n\r\n\treturn {\r\n\t\tcode: s.toString()\r\n\t\tmap: s.generateMap()\r\n\t\t}\r\n"
  ]
}