{
  "version": 3,
  "file": "PreProcessors.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\PreProcessors.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# PreProcessors.test.coffee\n\nimport prettierSync from '@prettier/sync'\n{format} = prettierSync\n\nimport {undef, LOG, spaces} from '@jdeighan/base-utils'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {UnitTester} from '@jdeighan/base-utils/utest'\nimport {\n\tpreProc, postProc, marker, jsmarker, brew,\n\tcoffeePreProcessor, i18nPreProcessor,\n\t} from '@jdeighan/svelte-utils/preprocessors'\n\nsp = spaces(1)\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tu = new UnitTester()\n\tu.transformValue = (block) ->\n\t\treturn preProc(block).code\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive statements\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t$: fullName = \"\\#{fName} \\#{lName}\"\n\t\t\"\"\", \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#{marker}\n\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\"\"\"\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#reactive fullName = \"\\#{fName} \\#{lName}\"\n\t\t\"\"\", \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#{marker}\n\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive block\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t$:\n\t\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\", \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\tif true #{marker}\n\t\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\"\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#reactive\n\t\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\", \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\tif true #{marker}\n\t\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive statement with reactive block\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t$: fullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\", \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#{marker}\n\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\tif true #{marker}\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\"\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#reactive fullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\", \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#{marker}\n\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\tif true #{marker}\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tu = new UnitTester()\n\tu.transformValue = (block) ->\n\t\treturn postProc(block).code\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive statements\n\n\tu.equal \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\t#{jsmarker}\n\t\tfullName = `${fName} ${lName}`;\n\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\t$: fullName = `${fName} ${lName}`;\n\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive block\n\n\tu.equal \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\tif (true) { #{jsmarker}\n\t\t#{sp}#{sp}fullName = `${fName} ${lName}`;\n\t\t#{sp}#{sp}console.log(`fullName becomes ${fullName}`);\n\t\t}\n\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\t$: {\n\t\t#{sp}#{sp}fullName = `${fName} ${lName}`;\n\t\t#{sp}#{sp}console.log(`fullName becomes ${fullName}`);\n\t\t}\n\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive statement with reactive block\n\n\tu.equal \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\t#{jsmarker}\n\t\tfullName = `${fName} ${lName}`;\n\n\t\tif (true) { #{jsmarker}\n\t\t#{sp}#{sp}console.log(`fullName becomes ${fullName}`);\n\t\t}\n\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\t$: fullName = `${fName} ${lName}`;\n\n\t\t$: {\n\t\t#{sp}#{sp}console.log(`fullName becomes ${fullName}`);\n\t\t}\n\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\n\tnormalize = (jsStr) ->\n\n\t\tresult = format(jsStr, {\n\t\t\tparser: 'flow'\n\t\t\tuseTabs: true\n\t\t\t})\n\t\treturn result.replace(/\\n\\n+/sg, \"\\n\")\n\n\t# ------------------------------------------------------------------------\n\n\tu = new UnitTester()\n\tu.transformValue = (code) =>\n\t\thResult = coffeePreProcessor({\n\t\t\tcontent: code\n\t\t\tattributes: {\n\t\t\t\tlang: 'coffee'\n\t\t\t\t}\n\t\t\tfilename: 'example.svelte'\n\t\t\t})\n\t\treturn normalize(hResult.code)\n\tu.transformExpected = normalize\n\n\t# ------------------------------------------------------------------------\n\t# Test normal JS\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\t\t\"\"\", \"\"\"\n\t\tvar fName, lName;\n\t\tfName = 'John';\n\t\tlName = 'Deighan';\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# Test reactive block\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\t\t$:\n\t\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\t\tfName = 'John';\n\t\tlName = 'Deighan';\n\t\t$: {\n\t\t\tfullName = `${fName} ${lName}`;\n\t\t\tconsole.log(`fullName becomes ${fullName}`);\n\t\t\t}\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# Test reactive statement\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\t\t$: fullName = \"\\#{fName} \\#{lName}\"\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\t\tfName = 'John';\n\t\tlName = 'Deighan';\n\t\t$: fullName = `${fName} ${lName}`;\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# Test reactive statement with reactive block\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\t\t$: fullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\t\tfName = 'John';\n\t\tlName = 'Deighan';\n\t\t$: fullName = `${fName} ${lName}`;\n\t\t$: {\n\t\t\tconsole.log(`fullName becomes \\${fullName}`);\n\t\t\t}\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tu = new UnitTester()\n\tu.transformValue = (block) ->\n\t\treturn brew(block).code\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive statements\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#{marker}\n\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\t#{jsmarker}\n\t\tfullName = `${fName} ${lName}`;\n\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive block\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\tif true #{marker}\n\t\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\tif (true) { #{jsmarker}\n\t\t#{sp}#{sp}fullName = `${fName} ${lName}`;\n\t\t#{sp}#{sp}console.log(`fullName becomes ${fullName}`);\n\t\t}\n\n\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test reactive statement with reactive block\n\n\tu.equal \"\"\"\n\t\tfName = 'John'\n\t\tlName = 'Deighan'\n\n\t\t#{marker}\n\t\tfullName = \"\\#{fName} \\#{lName}\"\n\t\tif true #{marker}\n\t\t\tconsole.log \"fullName becomes \\#{fullName}\"\n\t\t\"\"\", \"\"\"\n\t\tvar fName, fullName, lName;\n\n\t\tfName = 'John';\n\n\t\tlName = 'Deighan';\n\n\t\t#{jsmarker}\n\t\tfullName = `${fName} ${lName}`;\n\n\t\tif (true) { #{jsmarker}\n\t\t#{sp}#{sp}console.log(`fullName becomes ${fullName}`);\n\t\t}\n\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tu = new UnitTester()\n\tu.transformValue = (content) ->\n\t\thResult = i18nPreProcessor({\n\t\t\tcontent\n\t\t\tfilename: 'example.svelte'\n\t\t\t})\n\t\treturn hResult.code\n\n\t# ------------------------------------------------------------------------\n\n\tu.equal \"\"\"\n\t\t<h1>◄Hello, World!►</h1>\n\t\t\"\"\", \"\"\"\n\t\t<h1>{translate('Hello, World!')}</h1>\n\t\t\"\"\"\n\n\tu.equal \"\"\"\n\t\t<h1>◄Hello, 'John'!►</h1>\n\t\t\"\"\", \"\"\"\n\t\t<h1>{translate('Hello, \\\\'John\\\\'!')}</h1>\n\t\t\"\"\"\n\n\tu.equal \"\"\"\n\t\t<h1>◄Hello, 'John'!►</h1>\n\t\t<div>\n\t\t\t◄Today is Christmas!►\n\t\t</div>\n\t\t<div>\n\t\t\t◄Merry Christmas!►\n\t\t</div>\n\t\t\"\"\", \"\"\"\n\t\t<h1>{translate('Hello, \\\\'John\\\\'!')}</h1>\n\t\t<div>\n\t\t\t{translate('Today is Christmas!')}\n\t\t</div>\n\t\t<div>\n\t\t\t{translate('Merry Christmas!')}\n\t\t</div>\n\t\t\"\"\"\n\n\t)()\n"
  ]
}